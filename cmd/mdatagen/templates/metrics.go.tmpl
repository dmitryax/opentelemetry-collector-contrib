// Code generated by mdatagen. DO NOT EDIT.

package {{ .Package }}

import (
	{{- if .Metrics | parseImportsRequired }}
	"strconv"
	"fmt"
	{{- end }}
	"time"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver"
	{{- if .SemConvVersion }}
	conventions "go.opentelemetry.io/collector/semconv/v{{ .SemConvVersion }}"
	{{- end }}

	"github.com/open-telemetry/opentelemetry-collector-contrib/pkg/pdatautil"
)

{{ range $name, $info := .Attributes }}
{{- if $info.Enum -}}
// Attribute{{ $name.Render }} specifies the a value {{ $name }} attribute.
type Attribute{{ $name.Render }} int

const (
	_ Attribute{{ $name.Render }} = iota
	{{- range $info.Enum }}
	Attribute{{ $name.Render }}{{ . | publicVar }}
	{{- end }}
)

// String returns the string representation of the Attribute{{ $name.Render }}.
func (av Attribute{{ $name.Render }}) String() string {
	switch av {
	{{- range $info.Enum }}
	case Attribute{{ $name.Render }}{{ . | publicVar }}:
		return "{{ . }}"
	{{- end }}
	}
	return ""
}

// MapAttribute{{ $name.Render }} is a helper map of string to Attribute{{ $name.Render }} attribute value.
var MapAttribute{{ $name.Render }} = map[string]Attribute{{ $name.Render }}{
	{{- range $info.Enum }}
	"{{ . }}": Attribute{{ $name.Render }}{{ . | publicVar }},
	{{- end }}
}

{{ end }}
{{- end }}

{{ range $name, $metric := .Metrics -}}
type metric{{ $name.Render }} struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills {{ $name }} metric with initial data.
func (m *metric{{ $name.Render }}) init() {
	m.data.SetName("{{ $name }}")
	m.data.SetDescription("{{ $metric.Description }}")
	m.data.SetUnit("{{ $metric.Unit }}")
	m.data.SetEmpty{{ $metric.Data.Type }}()
	{{- if $metric.Data.HasMonotonic }}
	m.data.{{ $metric.Data.Type }}().SetIsMonotonic({{ $metric.Data.Monotonic }})
	{{- end }}
	{{- if $metric.Data.HasAggregated }}
	m.data.{{ $metric.Data.Type }}().SetAggregationTemporality(pmetric.AggregationTemporality{{ $metric.Data.AggregationTemporality }})
	{{- end }}
	{{- if $metric.Attributes }}
	m.data.{{ $metric.Data.Type }}().DataPoints().EnsureCapacity(m.capacity)
	{{- end }}
}

func (m *metric{{ $name.Render }}) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val {{ $metric.Data.MetricValueType.BasicType }}
{{- range $metric.Attributes -}}, {{ .RenderUnexported }}AttributeValue {{ (attributeInfo .).Type.Primitive }}{{ end }}) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.{{ $metric.Data.Type }}().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.Set{{ $metric.Data.MetricValueType }}Value(val)
	{{- range $metric.Attributes }}
	{{- if eq (attributeInfo .).Type.Primitive "[]byte" }}
	dp.Attributes().PutEmptyBytes("{{ (attributeInfo .).Name }}").FromRaw({{ .RenderUnexported }}AttributeValue)
	{{- else if eq (attributeInfo .).Type.Primitive "[]any" }}
	dp.Attributes().PutEmptySlice("{{ (attributeInfo .).Name }}").FromRaw({{ .RenderUnexported }}AttributeValue)
	{{- else if eq (attributeInfo .).Type.Primitive "map[string]any" }}
	dp.Attributes().PutEmptyMap("{{ (attributeInfo .).Name }}").FromRaw({{ .RenderUnexported }}AttributeValue)
	{{- else }}
	dp.Attributes().Put{{ (attributeInfo .).Type }}("{{ (attributeInfo .).Name }}", {{ .RenderUnexported }}AttributeValue)
	{{- end }}
	{{- end }}
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metric{{ $name.Render }}) updateCapacity() {
	if m.data.{{ $metric.Data.Type }}().DataPoints().Len() > m.capacity {
		m.capacity = m.data.{{ $metric.Data.Type }}().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metric{{ $name.Render }}) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.{{ $metric.Data.Type }}().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetric{{ $name.Render }}(cfg MetricConfig) metric{{ $name.Render }} {
	m := metric{{ $name.Render }}{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

{{ end -}}

// missedEmitsToDropRMB is number of missed emits after which resource builder will be dropped from MetricsBuilder.rmbMap.
// Potentially, this value can be made configurable through a MetricsBuilder option.
const missedEmitsToDropRMB = 5

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user config.
type MetricsBuilder struct {
	config    MetricsBuilderConfig                 // config of the metrics builder.
	buildInfo component.BuildInfo                  // contains version information
	startTime pcommon.Timestamp                    // start time that will be applied to all recorded data points.
	rmbMap    map[[16]byte]*ResourceMetricsBuilder // map of resource builders by resource hash.
}

type ResourceMetricsBuilder struct {
    buildInfo       component.BuildInfo
	startTime       pcommon.Timestamp // start time that will be applied to all recorded data points.
	metricsCapacity int // maximum observed number of metrics per resource.
    resource        pcommon.Resource
    missedEmits     int
    {{- range $name, $metric := .Metrics }}
    metric{{ $name.Render }} metric{{ $name.Render }}
    {{- end }}
}

// metricBuilderOption applies changes to default metrics builder.
type metricBuilderOption func(*MetricsBuilder)

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pcommon.Timestamp) metricBuilderOption {
	return func(mb *MetricsBuilder) {
		mb.startTime = startTime
	}
}

func NewMetricsBuilder(mbc MetricsBuilderConfig, settings receiver.CreateSettings, options ...metricBuilderOption) *MetricsBuilder {
	{{- range $name, $metric := .Metrics }}
	{{- if $metric.Warnings.IfEnabled }}
	if mbc.Metrics.{{ $name.Render }}.Enabled {
		settings.Logger.Warn("[WARNING] `{{ $name }}` should not be enabled: {{ $metric.Warnings.IfEnabled }}")
	}
	{{- end }}
	{{- if $metric.Warnings.IfEnabledNotSet }}
	if !mbc.Metrics.{{ $name.Render }}.enabledSetByUser {
		settings.Logger.Warn("[WARNING] Please set `enabled` field explicitly for `{{ $name }}`: {{ $metric.Warnings.IfEnabledNotSet }}")
	}
	{{- end }}
	{{- if $metric.Warnings.IfConfigured }}
	if mbc.Metrics.{{ $name.Render }}.enabledSetByUser {
		settings.Logger.Warn("[WARNING] `{{ $name }}` should not be configured: {{ $metric.Warnings.IfConfigured }}")
	}
	{{- end }}
	{{- end }}
	mb := &MetricsBuilder{
		config:    mbc,
		startTime: pcommon.NewTimestampFromTime(time.Now()),
		buildInfo: settings.BuildInfo,
		rmbMap:    make(map[[16]byte]*ResourceMetricsBuilder),
	}
	for _, opt := range options {
        opt(mb)
    }
    return mb
}

// resourceMetricsBuilderOption applies changes to provided resource metrics.
type resourceMetricsBuilderOption func(*ResourceMetricsBuilder)

// WithStartTimeOverride sets start time for all the resource metrics data points.
func WithStartTimeOverride(start pcommon.Timestamp) resourceMetricsBuilderOption {
	return func(rmb *ResourceMetricsBuilder) {
	    rmb.startTime = start
	}
}

// ResourceMetricsBuilder returns a ResourceMetricsBuilder that can be used to record metrics for a specific resource.
// It requires Resource to be provided which should be built with ResourceBuilder.
func (mb *MetricsBuilder) ResourceMetricsBuilder(res pcommon.Resource, options ...resourceMetricsBuilderOption) *ResourceMetricsBuilder {
    hash := pdatautil.MapHash(res.Attributes())
    if rmb, ok := mb.rmbMap[hash]; ok {
        return rmb
    }
    rmb := &ResourceMetricsBuilder{
        startTime:            mb.startTime,
        buildInfo:            mb.buildInfo,
        resource:             res,
        {{- range $name, $metric := .Metrics }}
        metric{{ $name.Render }}: newMetric{{ $name.Render }}(mb.config.Metrics.{{ $name.Render }}),
        {{- end }}
    }
    for _, op := range options {
        op(rmb)
    }
    mb.rmbMap[hash] = rmb
    return rmb
}

{{- if .ResourceAttributes }}
// NewResourceBuilder returns a new resource builder that should be used to build a resource associated with for the emitted metrics.
func (mb *MetricsBuilder) NewResourceBuilder() *ResourceBuilder {
	return NewResourceBuilder(mb.config.ResourceAttributes)
}
{{- end }}

// updateCapacity updates max length of metrics and resource attributes that will be used for the slice capacity.
func (rmb *ResourceMetricsBuilder) updateCapacity(ms pmetric.MetricSlice) {
	if rmb.metricsCapacity < ms.Len() {
		rmb.metricsCapacity = ms.Len()
	}
}

// emit emits all the metrics accumulated by the ResourceMetricsBuilder and updates the internal state to be ready for
// recording another set of metrics. It returns true if any metrics were emitted.
func (rmb *ResourceMetricsBuilder) emit(m pmetric.Metrics) bool {
	sm := pmetric.NewScopeMetrics()
	sm.Metrics().EnsureCapacity(rmb.metricsCapacity)
	{{- range $name, $metric := .Metrics }}
	rmb.metric{{- $name.Render }}.emit(sm.Metrics())
	{{- end }}
	if sm.Metrics().Len() == 0 {
	    return false
	}
    rmb.updateCapacity(sm.Metrics())
    sm.Scope().SetName("{{ .ScopeName }}")
    sm.Scope().SetVersion(rmb.buildInfo.Version)
    rm := m.ResourceMetrics().AppendEmpty()
    {{- if .SemConvVersion }}
    rm.SetSchemaUrl(conventions.SchemaURL)
    {{- end }}
    rmb.resource.CopyTo(rm.Resource())
    sm.MoveTo(rm.ScopeMetrics().AppendEmpty())
    return true
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user config, e.g. delta or cumulative.
func (mb *MetricsBuilder) Emit() pmetric.Metrics {
	m := pmetric.NewMetrics()
    for _, rmb := range mb.rmbMap {
        if ok := rmb.emit(m); !ok {
            rmb.missedEmits++
        }
    }
    for k, rmb := range mb.rmbMap {
        if rmb.missedEmits >= missedEmitsToDropRMB {
            delete(mb.rmbMap, k)
        }
    }
	return m
}

{{ range $name, $metric := .Metrics -}}
// Record{{ $name.Render }}DataPoint adds a data point to {{ $name }} metric.
func (rmb *ResourceMetricsBuilder) Record{{ $name.Render }}DataPoint(ts pcommon.Timestamp
	{{- if $metric.Data.HasMetricInputType }}, inputVal {{ $metric.Data.MetricInputType.String }}
	{{- else }}, val {{ $metric.Data.MetricValueType.BasicType }}
	{{- end }}
	{{- range $metric.Attributes -}}
	, {{ .RenderUnexported }}AttributeValue {{ if (attributeInfo .).Enum }}Attribute{{ .Render }}{{ else }}{{ (attributeInfo .).Type.Primitive }}{{ end }}
	{{- end }})
	{{- if $metric.Data.HasMetricInputType }} error{{ end }} {
	{{- if $metric.Data.HasMetricInputType }}
	{{- if eq $metric.Data.MetricValueType.BasicType "float64" }}
	val, err := strconv.ParseFloat(inputVal, 64)
	{{- else if eq $metric.Data.MetricValueType.BasicType "int64" }}
	val, err := strconv.ParseInt(inputVal, 10, 64)
	{{- end }}
	if err != nil {
		return fmt.Errorf("failed to parse {{ $metric.Data.MetricValueType.BasicType }} for {{ $name.Render }}, value was %s: %w", inputVal, err)
	}
	{{- end }}
	rmb.metric{{ $name.Render }}.recordDataPoint(rmb.startTime, ts, val
		{{- range $metric.Attributes -}}
		, {{ .RenderUnexported }}AttributeValue{{ if (attributeInfo .).Enum }}.String(){{ end }}
		{{- end }})
	{{- if $metric.Data.HasMetricInputType }}
	return nil
	{{- end }}
}
{{ end }}

// Reset resets the ResourceMetricsBuilder to its initial state. It should be used when external metrics source is
// restarted, and the ResourceMetricsBuilder should update its startTime and reset it's internal state accordingly.
func (rmb *ResourceMetricsBuilder) Reset(options ...resourceMetricsBuilderOption) {
	rmb.startTime = pcommon.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op(rmb)
	}
}
